import random
import requests
import sys


# function to user validate player name choice. Player name must be at least 3 characters and cannot be blank.
def player_name_choice():
    validName = False
    while validName is False:
        try:
            player_name = input("Hey! What's your name? ").capitalize()
            if len(player_name.strip()) >= 3:
                validName = True
                print(("Awesome! nice to meet you, {}!").format(player_name))
                return (player_name)
            else:
                print("Please enter a name that is at least 3 characters.")
        except ValueError:
            print("Sorry, I didn't understand that. Please try again.")
            continue
        else:
            pass


# function to user validate 'would you like to play?'. If player chooses 'n', the system exits.
def user_play_choice(name):
    user_play = input('Would you like to play Pokemon top trumps? y/n ').lower()
    validChoice = False
    while validChoice == False:
        if user_play not in ("y", "n"):
            user_play  # = input("Would you like to play Pokemon top trumps? y/n ")
        elif user_play == "y":
            print("Great!")
            validChoice = True
        elif user_play == "n":
            sys.exit(('No worries, {}, bye! ').format(name))
        else:
            print('Whoops! Please try again.')
            pass


# User validate player number choice. Must be 'own' or 'choice'.
def user_number_validation():
    def user_number():
        user_number = input('Would you like to pick your own or get 3 random choices? own/choice ')

    validChoice = False
    while validChoice == False:
        if user_number == "own":
            return (user_number)
            validChoice = True
        elif user_number == "choice":
            return (user_number)
            validChoice = True
        elif user_number not in ("own", "choice"):
            user_number = input('Would you like to pick your own or get 3 random choices? own/choice ')
        else:
            print('Whoops! Please try again.')
            pass


# Get a random pokemon with ID between 1 and 151.
def random_pokemon():
    pokemon_number = random.randint(1, 151)
    url = 'https://pokeapi.co/api/v2/pokemon/{}/'.format(pokemon_number)
    response = requests.get(url)
    pokemon = response.json()
    # Create a dictionary that contains the returned Pokemon's name, id, height and weight
    return {
        'name': pokemon['name'],
        'id': pokemon['id'],
        'height': pokemon['height'],
        'weight': pokemon['weight'],
    }


# returns a list of random numbers to choose from
def rand_int_list(number):
    rand_int_list = random.sample(range(0, 151), int(number))
    return rand_int_list


# Returns the chosen pokemon from number [0,1,2] in the own_choice list
def pokemon_choice(number):
    url = 'https://pokeapi.co/api/v2/pokemon/{}/'.format(number)
    response = requests.get(url)
    pokemon = response.json()
    return {
        'name': pokemon['name'],
        'id': pokemon['id'],
        'height': pokemon['height'],
        'weight': pokemon['weight'],
    }


# returns the 1st, 2nd or 3rd choice in the string
def user_pick_number(own_choice):
    validChoice = False
    while validChoice is False:
        try:
            pick_number = input(('Please choose {}, {} or {} ').format(own_choice[0], own_choice[1], own_choice[2]))
            if int(pick_number) == int(own_choice[0]):
                first_pick = pokemon_choice(pick_number)
                return (first_pick)
                validChoice = True
            elif int(pick_number) == own_choice[1]:
                second_pick = pokemon_choice(pick_number)
                return (second_pick)
                validChoice = True
            elif int(pick_number) == own_choice[2]:
                third_pick = pokemon_choice(pick_number)
                return (third_pick)
                validChoice = True
            else:
                print('Please pick again')
        except ValueError:
            print("Sorry, I didn't understand that. Please enter a number.")
            continue
        else:
            pass


# Ask the user which stat they want to use (id, height or weight)
def user_stat_choice():
    stat_choice = input('Which stat do you want to use? (id, height, weight) ')
    if stat_choice in ("id", "height", "weight"):
        return (stat_choice)
    else:
        print("You must enter id, height or weight. Try again")
        return


def run():
    global my_score
    global opponent_score

    # Do you want to play 'own' or random 'choice'?
    user_number = user_number_validation()

    if user_number == 'choice':
        my_pokemon = random_pokemon()
        print('You have {}'.format(my_pokemon))

    elif user_number == 'own':
        # returns a list of random numer of pokemon
        own_choice = rand_int_list(3)
        print('The choices are ID numbers {}'.format(own_choice))
        my_pokemon = user_pick_number(own_choice)
        print(my_pokemon)

    # Which stat to use?
    stat_choice = user_stat_choice()
    print(
        "You chose {}. It's stats are: \n id: {}, height: {}, weight: {}.".format(my_pokemon['name'], my_pokemon['id'],
                                                                                  my_pokemon['height'],
                                                                                  my_pokemon['weight']))

    opponent_pokemon = random_pokemon()
    print("Your opponent chose {}. It's stats are: \n id: {}, height: {}, weight: {}.".format(opponent_pokemon['name'],
                                                                                              opponent_pokemon['id'],
                                                                                              opponent_pokemon[
                                                                                                  'height'],
                                                                                              opponent_pokemon[
                                                                                                  'weight']))

    my_stat = my_pokemon[stat_choice]
    opponent_stat = opponent_pokemon[stat_choice]

    # Compare the player's and opponent's Pokemon on the chosen stat to decide who wins
    if my_stat > opponent_stat:
        my_score += 1
        print("Your pokemon's {} was greater. You Win!".format(stat_choice))

    elif my_stat < opponent_stat:
        opponent_score += 1
        print("Your pokemon's {} was less. You Lose!".format(stat_choice))

    else:
        print('Draw!', scores_message)


# Scores
my_score = 0
opponent_score = 0

####Actual game####

# What is your name?
name = player_name_choice()

# Do you want to play?
play = user_play_choice(name)

# Rounds
rounds = 1
playagain = 'y'
while playagain == 'y':
    print("\nRound: {}".format(rounds))
    run()
    scores_message = "Scores:\n{}: {}\nYour opponent's score: {}".format(name, my_score, opponent_score)
    print(scores_message)
    playagain = input('\nDo you want to play again? (y/n) ')
    rounds += 1

import pickle

# load the previous score if it exists
try:
    with open('score.txt', 'rb') as file:
        score = pickle.load(file)
except:
    score = 0

print("High score: %d" % score)

playagain = 'y'
while playagain == 'y':
    run()
    playagain = input('Do you want to play again? (y/n) ')
score = 10;

# save the score
with open('score.txt', 'wb') as file:
    pickle.dump(score, file)
